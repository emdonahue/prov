#!/bin/zsh

source $(dirname "$0")/deps >/dev/null

function assert() {
       if [[ "$2" != "$3" ]]; then
       	   echo "Failure: $1\n\tReceived: $2\n\tExpected: $3"
	   ERR=1
       fi
}

function teardown() {
    cd "$DIR"
    rm -f Makefile a b subdir/a subdir/b subdir2/a subdir2/b
    mkdir -p subdir
    rmdir subdir2 2>/dev/null    
}

DEPS=deps
DIR=$(mktemp -d)
trap "rm -rf $DIR" EXIT
mkdir "$DIR/subdir"
cd "$DIR"

#init
"$DEPS" init
[[ -f Makefile ]]
assert 'init creation' $? 0
"$DEPS" init 2>/dev/null
assert 'init already exists' $? 1
teardown

#set
"$DEPS" init
"$DEPS" set a <<< 'touch a'
assert 'set initial' "$("$DEPS" echo a)" "$(echo 'a: \n\ttouch a')"
"$DEPS" set a b <<< 'touch b'
assert 'set reset' "$("$DEPS" echo a)" "$(echo 'a: b\n\ttouch b')"
"$DEPS" unset a
assert 'unset' "$(grep -EA1 '^a' Makefile)" ''
teardown
"$DEPS" init
"$DEPS" set subdir/a subdir/b <<< 'cat subdir/b > subdir/a'
assert 'echo' "$("$DEPS" echo subdir/a)" "$(echo 'subdir/a: subdir/b\n\tcat subdir/b > subdir/a')"
teardown

#rm
"$DEPS" init
"$DEPS" set a <<< 'touch a'
touch a
"$DEPS" rm a
[[ -f a ]]
assert 'rm recipe removed' "$(grep -EA1 '^a' Makefile)" ''
assert 'rm file removed' $? 0
touch a
cd subdir
"$DEPS" set a <<< 'touch a'
"$DEPS" rm ../a
assert 'rm relpath' "$(grep -EA1 '^a' ../Makefile)" ''
teardown

#mv
"$DEPS" init
touch a
"$DEPS" set a <<< 'touch a'
"$DEPS" mv a b
[[ -f b ]]
assert 'mv file' $? 0
assert 'mv recipe' "$("$DEPS" echo b)" "$(echo 'b: \n\ttouch b')"
assert 'mv recipe remove' "$("$DEPS" echo a)" "No recipe for a found in $DIR/Makefile"
touch subdir/a
"$DEPS" set subdir/a <<< 'touch subdir/a'
"$DEPS" mv subdir/a subdir/b
[[ -f subdir/b ]]
assert 'mv subdir file' $? 0
assert 'mv subdir recipe' "$("$DEPS" echo subdir/b)" "$(echo 'subdir/b: \n\ttouch subdir/b')"
assert 'mv subdir recipe remove' "$("$DEPS" echo subdir/a)" "No recipe for subdir/a found in $DIR/Makefile"
cd subdir
"$DEPS" mv ../b ../a
assert 'mv relpath' "$("$DEPS" echo ../a)" "$(echo 'a: \n\ttouch a')"
assert 'mv relpath recipe remove' "$("$DEPS" echo ../b)" "No recipe for ../b found in $DIR/Makefile"
"$DEPS" mv ../a .
[[ -f a ]]
assert 'mv to dir' $? 0
assert 'mv to dir recipe' "$("$DEPS" echo a)" "$(echo 'subdir/a: \n\ttouch subdir/a')"
assert 'mv to dir recipe remove' "$("$DEPS" echo ../a)" "No recipe for ../a found in $DIR/Makefile"
"$DEPS" mv a b ..
[[ -f ../a ]]
assert 'mv multiple' $? 0
[[ -f ../b ]]
assert 'mv multiple' $? 0
assert 'mv multiple recipe a' "$("$DEPS" echo ../a)" "$(echo 'a: \n\ttouch a')"
assert 'mv multiple recipe b' "$("$DEPS" echo ../b)" "$(echo 'b: \n\ttouch b')"
assert 'mv multiple recipe a remove' "$("$DEPS" echo a)" "No recipe for a found in $DIR/Makefile"
assert 'mv multiple recipe b remove' "$("$DEPS" echo b)" "No recipe for b found in $DIR/Makefile"
cd ..
"$DEPS" mv a b subdir
"$DEPS" mv subdir subdir2
assert 'mv dir recipe a' "$("$DEPS" echo subdir2/a)" "$(echo 'subdir2/a: \n\ttouch subdir2/a')"
assert 'mv dir recipe b' "$("$DEPS" echo subdir2/b)" "$(echo 'subdir2/b: \n\ttouch subdir2/b')"
assert 'mv dir recipe a remove' "$("$DEPS" echo a)" "No recipe for a found in $DIR/Makefile"
assert 'mv dir recipe b remove' "$("$DEPS" echo b)" "No recipe for b found in $DIR/Makefile"
teardown

#add
"$DEPS" init
touch a
touch b
print -S 'cat a > b'
assert 'added msg' "$("$DEPS" add b)" "$(echo "Recipe added to $DIR/Makefile:\nb: a\n\tcat a > b")"
assert 'add' "$("$DEPS" echo b)" "$(echo 'b: a\n\tcat a > b')"
cd subdir
touch a
touch b
"$DEPS" add b > /dev/null
assert 'add subdir' "$("$DEPS" echo b)" "$(echo 'subdir/b: subdir/a\n\tcat subdir/a > subdir/b')"
print -S 'echo "a" > a'
print -S 'echo "a" > ../a'
"$DEPS" add ../a a > /dev/null
assert 'add multiple' "$("$DEPS" echo a)" "$(echo 'subdir/a: \n\techo "a" > subdir/a')"
assert 'add multiple 2' "$("$DEPS" echo ../a)" "$(echo 'a: \n\techo "a" > a')"
teardown

#comment
"$DEPS" init
"$DEPS" set a <<< 'touch a'
"$DEPS" comment a test comment
assert 'comment' "$("$DEPS" comment a)" 'test comment'
"$DEPS" comment a revised comment
assert 'revise comment' "$("$DEPS" comment a)" 'revised comment'
"$DEPS" set a b <<< 'touch a'
assert 'blank comment' "$("$DEPS" comment a)" ''
"$DEPS" comment a test comment
assert 'dependency comment' "$("$DEPS" comment a)" 'test comment'
"$DEPS" comment a revised comment
assert 'dependency comment revision' "$("$DEPS" comment a)" 'revised comment'
teardown

#cp
"$DEPS" init
touch a b
"$DEPS" set a <<< 'touch a'
"$DEPS" set b a <<< 'cat a > b'
"$DEPS" cp a b subdir
assert 'cp' "$("$DEPS" echo subdir/a)" "$(echo 'subdir/a: \n\ttouch subdir/a')"
assert 'cp src preserved' "$("$DEPS" echo a)" "$(echo 'a: \n\ttouch a')"
assert 'cp dependencies' "$("$DEPS" echo subdir/b)" "$(echo 'subdir/b: subdir/a\n\tcat subdir/a > subdir/b')"
rm subdir/b
"$DEPS" unset subdir/b
"$DEPS" cp b subdir/b
assert 'cp file' "$("$DEPS" echo subdir/b)" "$(echo 'subdir/b: a\n\tcat a > subdir/b')"
teardown

[[ -z "$ERR" ]] && echo "All Tests Pass"
exit "$ERR"
