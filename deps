#!/bin/zsh

#TODO make edit escape backslashes so they dont end up as ctrl chars
#TODO make edit retarget the recipe relative to pwd
#TODO escape sed patterns
#TODO make add with no arguments accept recipe on stdin
#TODO make cp handle directory structures. currently only works for simple, flat cases.

function deps() {

    local US=$'\037'
    local SEDFILENAME="s${US}"'\(^\|[><| ]\)SRC\([><:/| ]\|$\)'"${US}"'\1DEST\2'"${US}g"
    local SEDPATTERN='s/[^^]/[&]/g; s/\^/\\^/g'
    local SEDREPLACEMENT='s/[&/\]/\\&/g'

    function deps__replace_filename() { #OLD NEW (recipe on stdin)
	sed ${${SEDFILENAME/SRC/"$(sed "$SEDPATTERN" <<< "$1")"}/DEST/"$(sed "$SEDREPLACEMENT" <<< "$2")"}
    }

    function deps__echo_recipe() {
	sed -n '/^'"$1"'[:/]/,/^[^\t]/ {/^'"$1"'[:/]\|^\t/p};' "$MAKEFILE"
    }
    
    setopt extendedglob

    local CMD="$1"
    [[ $# -ne 0 ]] && shift

    # Find Makefile for subcommands that require it
    case "$CMD" in
	-h|--help|help|init|'');;
	*)
	    local MAKEFILE=$(DIR=$(pwd); while [[ -n "$DIR" && ! -f "$DIR/Makefile" ]]; do DIR="${DIR%/*}"; done; echo "${DIR}/Makefile")
	    [[ ! -f "$MAKEFILE" ]] && echo "Makefile not found. Use $(basename "$0") init." 1>&2 && return 1
	    ;;
    esac

    local MAKEDIR="$(dirname "$MAKEFILE")"

    # Parse the main subcommand
    case "$CMD" in
	--help|-h|help) #[SUBCOMMAND], Prints help text and options for SUBCOMMAND. If SUBCOMMAND omitted, prints list of subcommands.
	    [[ $# -eq 0 ]] && echo 'deps - Automatic Makefile generation for data processing pipelines from commandline history\nUsage: deps SUBCOMMAND [ARGUMENTS...]\nSubcommands:'
	    grep -E -- "${1:-\\w+}\)\s#" "$functions_source[$0]" | sed -E -- "s/^[[:space:]]*([-|[:alpha:]]+)\)\s#([^,]*), (.*)/\1 \2 - \3/" | sed $((${+1}+1))',$ s/^[[:space:]]*/\t/'
	    ;;

	add) #[FILE...], Heuristically scans history for recipe that created FILE and adds to Makefile. Recipes must contain redirects to FILE (eg "> FILE"). Dependencies are determined by tokens contained in recipe that refer to current files. Must be run from directory where command was first executed.
	    for f in "$@"; do
		local RECIPE=$(fc -nrl -1000 | grep -E ">\|?\s*$f([ )(><|]+|$)" | head -n1)
		if [[ -z "$RECIPE" ]]; then
		    echo "No recipe found for $f" >&2
		else
		    local -U DEPENDENCIES=()
		    local IFS=$IFS')(><|'
		    for D in "${=RECIPE}"; do
			if [[ -f "$D" && "$D" != "$f" ]]; then
			    RECIPE=$(deps__replace_filename "$D" "$(realpath -s --relative-to="$MAKEDIR" "$D")" <<< "$RECIPE") 
			    DEPENDENCIES+=("$(realpath -s --relative-to="$MAKEDIR" "$D")")
			fi
		    done
		    RECIPE=$(deps__replace_filename "$f" "$(realpath -s --relative-to="$MAKEDIR" "$f")" <<< "$RECIPE")
		    "$0" set "$(realpath -s --relative-to="$MAKEDIR" "$f")" "$DEPENDENCIES" <<< "$RECIPE"
		    echo "Recipe added to $MAKEFILE:"
		    "$0" echo "$f"
		fi
	    done
	    ;;

	comment) #TARGET [COMMENT], Sets or prints a short comment associated with the recipe for TARGET. Useful for quick notes annotating generated files. If COMMENT is present, set the comment, otherwise print.
	    if [[ $# -eq 0 ]]; then
		"$0" help "$CMD" 1>&2 && return 1
	    elif [[ $# -eq 1 ]]; then
		grep -E '^'"$(realpath -s --relative-to="$MAKEDIR" "$1")"':' "$MAKEFILE" | sed -E 's/^[^#]*#?//'
	    else
		local TARGET="${$(realpath -s --relative-to="$MAKEDIR" "$1"):gs_/_\\/_}"
		shift
		sed -Ei -- "/^$TARGET:/ s/([^#]*)#?.*/\1#${*}/" "$MAKEFILE"
	    fi
	    ;;

	cp) #SOURCE... DEST; Recursively copies the SOURCE files and folders to DEST, modifying their mutual dependencies to point to the new copies within a given cp command.
	    # file -> file
	    # file ... -> dir
	    # dir ... -> dir
	    # X file ... file [blocked by cp command]
	    cp -ir "$@"
	    #local CP_SRCFILES=(${(u)${(@0):-"$(find "${@[1,-2]}" -type f -exec realpath -zs --relative-to="$MAKEDIR" {} \;)"}})
	    local CP_SRCFILES=(${(u)${(@0):-"$(realpath -sz --relative-to "$MAKEDIR" "${@[1,-2]}")"}})
	    echo "SRCFILES: $CP_SRCFILES"
	    if [[ ! -d "${@[-1]}" ]]; then local CP_BASENAME=; else unset CP_BASENAME; fi
	    for src in "${CP_SRCFILES[@]}"; do
		local SRCPATH=$(sed $SEDPATTERN <<< "$src")
		#local RECIPE=$(sed -n '/^'"$SRCPATH"':/,/^[^\t]/ {/^'"$SRCPATH"':\|^\t/p};' "$MAKEFILE")
		local RECIPE=$(deps__echo_recipe "$SRCPATH")
		#replace with echo
		echo "RECIPE FOR $src:\n$RECIPE" >&2
		for dest in "${CP_SRCFILES[@]}"; do #TODO rename dest
		    echo "replacement, $dest with $(realpath -s --relative-to="$MAKEDIR" ${@[-1]}${CP_BASENAME-/$(basename "$dest")}):"
		    RECIPE=$(deps__replace_filename "$dest" $(realpath -s --relative-to="$MAKEDIR" ${@[-1]}${CP_BASENAME-/$(basename "$dest")}) <<< "$RECIPE")
		    echo "$RECIPE"
		done
		echo "$RECIPE" >> "$MAKEFILE"
		
		#sed -n '/^'"$SRCPATH"':/,/^[^\t]/ {1p;/^\t/n};' "$MAKEFILE" >&2
	    done
	    #sed -n "$(for f in "${CP_SRCFILES[@]}"; do echo -En '/^'"$(sed $SEDPATTERN <<< "$f")"':/,/^[^\t]/ {/^'"$(sed $SEDPATTERN <<< "$f")"':\|^\t/p};'; done)" "$MAKEFILE" | sed "$(for f in "${CP_SRCFILES[@]}"; do echo -En "${${SEDFILENAME/SRC/"$(sed $SEDPATTERN <<< "$f")"}/DEST/"$(sed $SEDREPLACEMENT <<< $(realpath -s --relative-to="$MAKEDIR" ${@[-1]}${CP_BASENAME-/$(basename $f)}))"};"; done)" >> "$MAKEFILE"
	    #sed -n "$(for f in "${CP_SRCFILES[@]}"; do echo -En '/^'"$(sed $SEDPATTERN <<< "$f")"':/,/^[^\t]/ {/^'"$(sed $SEDPATTERN <<< "$f")"':\|^\t/p};'; done)" "$MAKEFILE" | sed "$(for f in "${CP_SRCFILES[@]}"; do echo -En "${${SEDFILENAME/SRC/"$(sed $SEDPATTERN <<< "$f")"}/DEST/"$(sed $SEDREPLACEMENT <<< $(realpath -s --relative-to="$MAKEDIR" ${@[-1]}${CP_BASENAME-/$(basename $f)}))"};"; done)" >> "$MAKEFILE"
	    ;;

	echo) #TARGET, Echoes the recipe for TARGET
	    [[ ! -f "$MAKEFILE" ]] && return 1
	    local RECIPE=$(grep -EA1 "^$(realpath -s --relative-to="$MAKEDIR" "$1"):" "$MAKEFILE" | sed 's/\$\$/$/g')
	    [[ -z "$RECIPE" ]] && echo "No recipe for $1 found in $MAKEFILE" >&2 && return 1
	    echo "$RECIPE"
	    ;;

	edit) #TARGET, Places the recipe for TARGET on the command line so it can be modified and re-added to the Makefile if needed.
	    print -z "$("$0" echo "$1" | tail -n +2 | sed -E 's/^\s*//')"
	    ;;

	init) #, Creates a new Makefile in the current directory. Use before other commands that attempt to modify the Makefile.
	    [[ -f Makefile ]] && {echo 'Makefile already exists' 1>&2; return 1}
	    echo 'SHELL=zsh' >> Makefile
	    echo '.PHONY: all clean' >> Makefile
	    echo 'TARGETS=$(shell sed -nE "/^[^[:space:]]*:/ s/:.*//p" Makefile | grep -Zv -e "^all$$" -e "^clean$$" -e "^\.PHONY$$" | tee >(xargs dirname -z | xargs -0 mkdir -p) | tr "\\0" " ")' >> Makefile
	    echo 'all: $(TARGETS)' >> Makefile
	    echo 'clean:' >> Makefile
	    echo '\trm -f $(TARGETS)' >> Makefile
	    ;;

	less) #, Opens the Makefile in less.
	    less "$MAKEFILE"
	    ;;

	mv) #SOURCE... DEST, Moves a file with mv and updates the Makefile accordingly.
	    if [[ -d "${@[-1]}" ]]; then
		for f in "${@[1,-2]}"; do
		    "$0" mv "$f" "${@[-1]}/$(basename $f)"
		done
	    else
		mv -i "$@"
		local SRC=$(realpath -s --relative-to="$MAKEDIR" "$1")
		local DEST=$(realpath -s --relative-to="$MAKEDIR" "$2")
		"$0" unset "$DEST" #Delete overwritten recipe if it exists.
		sed -i ${${SEDFILENAME/SRC/"$SRC"}/DEST/"$DEST"} "$MAKEFILE"
	    fi
	    ;;

	rm) #TARGET, Unsets the recipe for building TARGET from the Makefile and deletes the corresponding file.
	    for f in "$@"; do
		"$0" unset "$(realpath -s --relative-to="$MAKEDIR" "$f")"
	    done
	    rm -f "$@"
	    ;;

	set) #TARGET [DEPENDENCY...], Creates a new recipe for TARGET using DEPENDENCY and a recipe from stdin.
    	    "$0" unset "$1"
	    echo -n "$1: " >> "$MAKEFILE"
	    shift
	    echo "$@" >> "$MAKEFILE"
	    <&0 sed -e 's/^/\t/' -e 's/\$/$$/g' >> "$MAKEFILE"
	    ;;

	unset) #TARGET, Deletes the recipe for building TARGET from the Makefile.
	    for t in "$@"; do
		awk -i inplace "/^${t:gs_/_\\/_}:/ {skip=1; next} skip && !/^\s/ {skip=0} !skip {print}" "$MAKEFILE"
	    done
	    ;;

	*)
	    "$0" help 1>&2
	    return 1
	    ;;
    esac
}
